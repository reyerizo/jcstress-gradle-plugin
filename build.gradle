buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.7.0'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath "com.gradle.publish:plugin-publish-plugin:0.9.7"
    }
}

plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

group 'com.github.erizo.gradle'

apply plugin: 'com.jfrog.bintray'
apply plugin: 'net.researchgate.release'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: "com.gradle.plugin-publish"

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileGroovy.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

sourceSets {
    integration {
        groovy {
            srcDir 'src/integration/groovy'
        }
        resources {
            srcDir 'src/integration/resources'
        }

        compileClasspath += sourceSets.main.output + sourceSets.test.output + configurations.testCompile + configurations.testRuntime
        runtimeClasspath += compileClasspath
    }
}

configurations {
    integrationCompile.extendsFrom testCompile
    integrationRuntime.extendsFrom testRuntime
}

idea {
    module {
        scopes.TEST.plus += [configurations.integrationCompile]
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    testCompile 'commons-io:commons-io:2.4'
    testCompile gradleTestKit()
    testRuntime files(createClasspathManifest)
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

afterReleaseBuild.dependsOn bintrayUpload

bintray {
    user = System.properties['bintray_user'] ? System.properties['bintray_user'] : ""
    key = System.properties['bintray_api_key'] ? System.properties['bintray_api_key'] : ""
    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'jcstress-gradle-plugin'
        desc = 'Jcstress gradle plugin'
        websiteUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
        issueTrackerUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
        vcsUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin.git'
        licenses = ['Apache-2.0']
        labels = ['jcstress', 'gradle', 'bintray']
        publicDownloadNumbers = true
        version {
            name = project.version //Bintray logical version name
            vcsTag = project.version
            mavenCentralSync {
                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
                user = 'userToken'
                password = 'paasword'
                close = '1'
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
    vcsUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
    description = 'Jcstress gradle plugin'
    tags = ['jcstress', 'gradle']

    plugins {
        jcstressGradlePlugin {
            id = 'com.github.erizo.gradle.jcstress'
            displayName = 'Jcstress gradle plugin'
        }
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task createPluginClasspath {
    def outputDir = file("${buildDir}/resources/test")

    inputs.files sourceSets.test.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test.dependsOn(['createPluginClasspath'])

