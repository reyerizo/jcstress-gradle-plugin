buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.8.1'
    }
}

plugins {
    id 'jacoco'
    id 'java-gradle-plugin'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'com.gradle.plugin-publish' version '1.1.0'
}

group 'io.github.reyerizo.gradle'

apply plugin: 'net.researchgate.release'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'signing'

compileGroovy.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
}

if (!project.hasProperty('ossrhUsername')) ext.ossrhUsername = '**undefined**'
if (!project.hasProperty('ossrhPassword')) ext.ossrhPassword = '**undefined**'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

sourceSets {
    integration {
        groovy {
            srcDir 'src/integration/groovy'
        }
        resources {
            srcDir 'src/integration/resources'
        }

        compileClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

idea {
    module {
        scopes.TEST.plus += [configurations.integrationRuntimeClasspath, configurations.integrationCompileClasspath]
    }
}

task integrationTestJava11(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

task integrationTestJava17(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
    useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

task integrationTest {
    dependsOn(integrationTestJava11, integrationTestJava17)
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

rootProject.tasks.named("processIntegrationResources") {
    duplicatesStrategy = 'include'
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()

    testImplementation('org.spockframework:spock-core:2.1-groovy-3.0') {
        exclude(module: 'groovy-all')
    }

    testImplementation 'commons-io:commons-io:2.11.0'
    testCompileOnly 'org.openjdk.jcstress:jcstress-core:0.15'
    testImplementation gradleTestKit()
    testRuntimeOnly files(createClasspathManifest)
}

afterReleaseBuild.dependsOn(publish, publishPlugins)

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = 'Jcstress gradle plugin'
                description = 'This plugin integrates The Java Concurrency Stress tests with Gradle.'
                url = 'https://github.com/reyerizo/jcstress-gradle-plugin'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'jerzykrlk'
                        name = 'Jerzy Krolak'
                    }
                }
                scm {
                    connection = 'https://github.com/reyerizo/jcstress-gradle-plugin.git'
                    developerConnection = 'https://github.com/reyerizo/jcstress-gradle-plugin.git'
                    url = 'https://github.com/reyerizo/jcstress-gradle-plugin/tree/master'
                }
            }
        }
    }

    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username "${ossrhUsername}"
                password "${ossrhPassword}"
            }
        }
    }
}

signing {
    sign publishing.publications.pluginMaven
}

gradlePlugin {
    website = 'https://github.com/reyerizo/jcstress-gradle-plugin'
    vcsUrl = 'https://github.com/reyerizo/jcstress-gradle-plugin'
    plugins {
        jcstressGradlePlugin {
            id = 'io.github.reyerizo.gradle.jcstress'
            displayName = 'Jcstress gradle plugin'
            description = 'This plugin integrates The Java Concurrency Stress tests with Gradle.'
            implementationClass = 'com.github.erizo.gradle.JcstressPlugin'
            tags.set(['jcstress', 'gradle'])
        }
    }
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.required = true // coveralls plugin depends on xml format report
        html.required = true
    }
}

coveralls {
    jacocoReportPath 'build/reports/jacoco/test/jacocoTestReport.xml'
}

task createPluginClasspath {
    def outputDir = file("${buildDir}/resources/test")

    inputs.files sourceSets.test.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test {
    useJUnitPlatform()
    dependsOn('createPluginClasspath')
}

/**
 * 1. gradlew clean build release
 * 2. in Sonatype -> Staging Repositories, delete the io/github/reyerizo/gradle/jcstress/ branch
 * 3. Close the repository,
 * 4. Release the repository,
 */
