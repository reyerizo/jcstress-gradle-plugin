buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.researchgate:gradle-release:2.7.0'
    }
}

plugins {
    id 'jacoco'
    id 'java-gradle-plugin'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'com.gradle.plugin-publish' version '0.12.0'
}

group 'com.github.reyerizo.gradle'

apply plugin: 'net.researchgate.release'
apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'idea'
apply plugin: "com.gradle.plugin-publish"
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileGroovy.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
    mavenLocal()
    jcenter()
}

sourceSets {
    integration {
        groovy {
            srcDir 'src/integration/groovy'
        }
        resources {
            srcDir 'src/integration/resources'
        }

        compileClasspath += sourceSets.main.output + sourceSets.test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntimeOnly.extendsFrom testRuntimeOnly
}

idea {
    module {
        scopes.TEST.plus += [configurations.integrationRuntimeClasspath, configurations.integrationCompileClasspath]
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath
}

task createClasspathManifest {
    def outputDir = file("$buildDir/$name")

    inputs.files sourceSets.main.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
    }
}

dependencies {
    implementation localGroovy()
    implementation gradleApi()

    testImplementation('org.spockframework:spock-core:1.3-groovy-2.4') {
        exclude(module: 'groovy-all')
    }

    testImplementation 'commons-io:commons-io:2.4'
    testImplementation gradleTestKit()
    testRuntimeOnly files(createClasspathManifest)
}

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
        }
    }
}

afterReleaseBuild.dependsOn(uploadArchives, publishPlugins)

//bintray {
//    user = System.properties['bintray_user'] ? System.properties['bintray_user'] : ""
//    key = System.properties['bintray_api_key'] ? System.properties['bintray_api_key'] : ""
//    publications = ['mavenJava']
//    dryRun = false
//    publish = true
//    pkg {
//        repo = 'maven'
//        name = 'jcstress-gradle-plugin'
//        desc = 'Jcstress gradle plugin'
//        websiteUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
//        issueTrackerUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin'
//        vcsUrl = 'https://github.com/jerzykrlk/jcstress-gradle-plugin.git'
//        licenses = ['Apache-2.0']
//        labels = ['jcstress', 'gradle', 'bintray']
//        publicDownloadNumbers = true
//        version {
//            name = project.version //Bintray logical version name
//            vcsTag = project.version
//            mavenCentralSync {
//                sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
//                user = 'userToken'
//                password = 'paasword'
//                close = '1'
//            }
//        }
//    }
//}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Jcstress gradle plugin'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'This plugin integrates The Java Concurrency Stress tests with Gradle.'
                url 'https://github.com/reyerizo/jcstress-gradle-plugin'

                scm {
                    connection 'https://github.com/reyerizo/jcstress-gradle-plugin.git'
                    developerConnection 'https://github.com/reyerizo/jcstress-gradle-plugin.git'
                    url 'https://github.com/reyerizo/jcstress-gradle-plugin/tree/master'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'jerzykrlk'
                        name 'Jerzy Krolak'
                        email 'jerzy.erizo@gmail.com'
                    }
                }
            }
        }
    }
}

pluginBundle {
    website = 'https://github.com/reyerizo/jcstress-gradle-plugin'
    vcsUrl = 'https://github.com/reyerizo/jcstress-gradle-plugin'
    description = 'Jcstress gradle plugin'
    tags = ['jcstress', 'gradle']
}

gradlePlugin {
    plugins {
        jcstressGradlePlugin {
            id = 'com.github.reyerizo.gradle.jcstress'
            displayName = 'Jcstress gradle plugin'
            description = 'This plugin integrates The Java Concurrency Stress tests with Gradle.'
            implementationClass = 'com.github.erizo.gradle.JcstressPlugin'
        }
    }
}

jacoco {
    toolVersion = "0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

task createPluginClasspath {
    def outputDir = file("${buildDir}/resources/test")

    inputs.files sourceSets.test.runtimeClasspath
    outputs.dir outputDir

    doLast {
        outputDir.mkdirs()
        file("${outputDir}/plugin-classpath.txt").text = sourceSets.test.runtimeClasspath.join('\n',)
    }
}

test.dependsOn(['createPluginClasspath'])

